{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"IBM MAS SCADA Historian Connector \uf0c1 This document describes steps to install and configure MAS SCADA Historian Connector . You can install the Connector as an archive file directly on an on-premise host system or in cloud. The host system must have access to SCADA historian to extract tag data and MAS Monitor to send tag events. The Connector enables transfering data from the SCADA historian into MAS Monitor for visualization and AI-driven analytics Documentation is divided into the following sections: Overview Installation Configuration Connection Configuration Mapping Rules Configuration","title":"Home"},{"location":"#ibm-mas-scada-historian-connector","text":"This document describes steps to install and configure MAS SCADA Historian Connector . You can install the Connector as an archive file directly on an on-premise host system or in cloud. The host system must have access to SCADA historian to extract tag data and MAS Monitor to send tag events. The Connector enables transfering data from the SCADA historian into MAS Monitor for visualization and AI-driven analytics Documentation is divided into the following sections: Overview Installation Configuration Connection Configuration Mapping Rules Configuration","title":"IBM MAS SCADA Historian Connector"},{"location":"configuration/","text":"Connector Configuration \uf0c1 The configuration files are in <InstallRoot>/volume/config directory. The following configuration files need to be created to configure the connector: connection.json : Contains the connection related items to connect to MAS Monitor and SCADA historian. mapping.json : Contains mapping configuration to map columns from mapping.csv file into device type, device id, dimensions and metrics, and transform data extracted data from SCADA historian and send to MAS. CSV file : CSV file with the Tag Points data that is used by the mapping.json to map the assets and the data into MAS Monitor. Pre-requisite \uf0c1 To create connection.json file, you need SCADA Historian and MAS connectivity URL and credentials. For details refer to corresponding sections. The CSV file can be created using PI Builder or created manually following the expected format. Configuration details: \uf0c1 For details on the format and content of each configuration file, refer to the following sections: Connection Configuration Mapping Rules Configuration","title":"Configuration"},{"location":"configuration/#connector-configuration","text":"The configuration files are in <InstallRoot>/volume/config directory. The following configuration files need to be created to configure the connector: connection.json : Contains the connection related items to connect to MAS Monitor and SCADA historian. mapping.json : Contains mapping configuration to map columns from mapping.csv file into device type, device id, dimensions and metrics, and transform data extracted data from SCADA historian and send to MAS. CSV file : CSV file with the Tag Points data that is used by the mapping.json to map the assets and the data into MAS Monitor.","title":"Connector Configuration"},{"location":"configuration/#pre-requisite","text":"To create connection.json file, you need SCADA Historian and MAS connectivity URL and credentials. For details refer to corresponding sections. The CSV file can be created using PI Builder or created manually following the expected format.","title":"Pre-requisite"},{"location":"configuration/#configuration-details","text":"For details on the format and content of each configuration file, refer to the following sections: Connection Configuration Mapping Rules Configuration","title":"Configuration details:"},{"location":"connection/","text":"Connection Configuration \uf0c1 The connection.json is a JSON file that allows you to define the Connector connection-related items to connect to SCADA historian database and MAS. The location of this file is <InstallRoot>/ibm/masshc/volume/config/connection.json . Connection Configuration Object \uf0c1 Provide connection configuration object in a json formated file: { \"id\": \"String\", \"historian\": { \"type\": \"String\", \"jdbcUrl\": \"String\", \"user\": \"String\", \"password\": \"String\", \"serverTimezone\": \"String\", \"startDate\": \"String\", \"dbType\": \"String\", \"schema\": \"String\", \"database\": \"String\", \"extractInterval\": Integer, \"extractIntervalHistorical\": Integer }, \"iotp\": { \"url\": \"String\", \"orgId\": \"String\", \"host\": \"String\", \"port\": integer, \"schemaName\": \"String\", \"tenantId\": \"String\", \"apiKey\": \"String\", \"apiToken\": \"String\", \"asHost\": \"String\", \"asKey\": \"String\", \"asToken\": \"String\", \"apiVersion\": Integer, \"publishProtocol\": \"String\", \"trustServerCert\": Integer, \"mamUserEmail\": \"String\", \"publishProtocol\": Integer, \"iotClientType\": Integer }, \"isSAASEnv\": Integer, } Where: id : Description to identify the connection json file. It's also the name of the cache file being created in <InstallRoot>/ibm/masshc/volume/data/tagcache by the connector. historian : This configuration object is required. The configuration items specified in this object are used to connect to SCADA historian to extract device data and send to MAS Monitor. Required Items: type : Historian type. The valid options are \"osipi\" or \"ignition\". jdbcUrl : JDBC URL to connect to the historian database. Example \"jdbc:pisql://10.208.72.125/Data Source=pidemo; Integrated Security=SSPI;\" . user : User name to connect to historian. password : Password to connect to historian. serverTimezone : Timezone of historian database server. It needs to be a Time zone ID (Example \"American/Chicago\" or \"PST\" ). Refer to this document for valid inputs. startDate : Extract device data from the specified date. Valid format is \"YYYY-MM-DD HH:MM:SS\" dbType : Type of database server configured as SCADA hostorian. If not specified, database type is taken as MYSQL. Feasible values are \"pisql\" (OSIPI historian) or mssql (which defaults to MYSQL). schema : Schema name. It is used to create the SQL query. From <schema>.<database> where time ... . Example for OSI PI: \"piarchive\" . database : Database name. It is also used to create the SQL query. From <schema>.<database> where time ... . Example for OSI PI: \"picomp2\" . extractInterval : Specifies the timewindow (in seconds) of each SQL query. The maximum and default value is 120 . extractIntervalHistorical : Specifies the timewindow (in seconds) of each SQL query when historical data (past data) is requested. The default value is 1800 . iotp : This configuration object is required and contains the essential information to configure the connector for connecting to MAS and send device data to it. To fill in this object, you need credentials from MAS Monitor API and IoT tool API. Required Items: url : Specifies MAS Monitor IoT tool API URL used to configure MAS. orgId : Specifies a six character organization Id assigned to your IoT Platform service. It is usually the first element in the url item. host : Specifies IoT tool host for connecting to MAS to send device data. port : Specifies port to connect to MAS. apiKey : Specifies IoT tool API Key to configure device types, devices, interfaces and send MQTT messages. apiToken : Specifies IoT tool API Token to configure device types, devices, interfaces and send MQTT messages. schemaName : Specifies the database schema to configure dimensions. tenantId : Specifies tenant ID. asHost : Specifies MAS Monitor host to configure dimensions. asKey : Specifies MAS Monitor API key to configure dimensions. asToken : Specifies MAS Monitor API token to configure dimensions. apiVersion : Specifies Monitor API version. Valid options are 1 and 2 (default). trustServerCert : Specifies whether to trust all SSL certificates or not. If set to 1 , all certificates are trusted. mamUserEmail : Email address used to create the REST client if apiVersion is set to 2 and isSAASEnv is set to 0 . publishProtocol : Specifies the protocol/method used to publish. Default value is \"mqtt\" . Other valid values are \"kafka\" and \"dbupload\" but they are not currently supported. iotClientType : Defines the IoT MQTT client type. Default value is 1 (Device Client), but it can also take 2 (Gateway client) or 3 (Application client). It affects the publisher. isSAASEnv : Decides the initialization of te REST client. If set to 0 , REST client uses the Monitor API credentials, while for any other value it will use the IoT tool credentials. Sample connection.json Configuration File \uf0c1 { \"id\": \"Connection JSON file of ABC Corp.\", \"historian\": { \"type\": \"osipi\", \"jdbcUrl\": \"jdbc:pioledb://mySQLDAS/Data Source=myPIServer; Integrated Security=SSPI;\", \"user\": \"Administrator\", \"password\": \"xxxxxxxxxx\", \"serverTimezone\": \"American/Chicago\", \"startDate\": \"2021-12-05 05:00:00\", \"dbType\": \"pisql\", \"schema\": \"piarchive\", \"database\": \"picomp2\", \"extractInterval\": 120, \"extractIntervalHistorical\": 1800 }, \"iotp\": { \"url\": \"https://tenant1.iot.monitordemo.ibmmam.com/api/v0002\", \"orgId\": \"tenant1\", \"host\": \"tenant1.messaging.iot.monitordemo.ibmmam.com\", \"port\": 443, \"schemaName\": \"BLUADMIN\", \"apiKey\": \"a-xxxxxx-tavok0xsxt\", \"apiToken\": \"cNyH_XXXXXX-p2ppVl\", \"tenantId\": \"tenant1\", \"asHost\": \"tenant1.api.monitor.monitordemo3.ibmmam.com\", \"asKey\": \"xxxxxxxxxxxxxxxxxx\", \"asToken\": \"xxxxxxxxxxxxxxxxxxxx\", \"apiVersion\": 2, \"trustServerCert\": 1, \"mamUserEmail\": \"example@example.com\", \"publishProtocol\": \"mqtt\", \"iotClientType\": 1 }, \"isSAASEnv\": 0 }","title":"Connection Configuration"},{"location":"connection/#connection-configuration","text":"The connection.json is a JSON file that allows you to define the Connector connection-related items to connect to SCADA historian database and MAS. The location of this file is <InstallRoot>/ibm/masshc/volume/config/connection.json .","title":"Connection Configuration"},{"location":"connection/#connection-configuration-object","text":"Provide connection configuration object in a json formated file: { \"id\": \"String\", \"historian\": { \"type\": \"String\", \"jdbcUrl\": \"String\", \"user\": \"String\", \"password\": \"String\", \"serverTimezone\": \"String\", \"startDate\": \"String\", \"dbType\": \"String\", \"schema\": \"String\", \"database\": \"String\", \"extractInterval\": Integer, \"extractIntervalHistorical\": Integer }, \"iotp\": { \"url\": \"String\", \"orgId\": \"String\", \"host\": \"String\", \"port\": integer, \"schemaName\": \"String\", \"tenantId\": \"String\", \"apiKey\": \"String\", \"apiToken\": \"String\", \"asHost\": \"String\", \"asKey\": \"String\", \"asToken\": \"String\", \"apiVersion\": Integer, \"publishProtocol\": \"String\", \"trustServerCert\": Integer, \"mamUserEmail\": \"String\", \"publishProtocol\": Integer, \"iotClientType\": Integer }, \"isSAASEnv\": Integer, } Where: id : Description to identify the connection json file. It's also the name of the cache file being created in <InstallRoot>/ibm/masshc/volume/data/tagcache by the connector. historian : This configuration object is required. The configuration items specified in this object are used to connect to SCADA historian to extract device data and send to MAS Monitor. Required Items: type : Historian type. The valid options are \"osipi\" or \"ignition\". jdbcUrl : JDBC URL to connect to the historian database. Example \"jdbc:pisql://10.208.72.125/Data Source=pidemo; Integrated Security=SSPI;\" . user : User name to connect to historian. password : Password to connect to historian. serverTimezone : Timezone of historian database server. It needs to be a Time zone ID (Example \"American/Chicago\" or \"PST\" ). Refer to this document for valid inputs. startDate : Extract device data from the specified date. Valid format is \"YYYY-MM-DD HH:MM:SS\" dbType : Type of database server configured as SCADA hostorian. If not specified, database type is taken as MYSQL. Feasible values are \"pisql\" (OSIPI historian) or mssql (which defaults to MYSQL). schema : Schema name. It is used to create the SQL query. From <schema>.<database> where time ... . Example for OSI PI: \"piarchive\" . database : Database name. It is also used to create the SQL query. From <schema>.<database> where time ... . Example for OSI PI: \"picomp2\" . extractInterval : Specifies the timewindow (in seconds) of each SQL query. The maximum and default value is 120 . extractIntervalHistorical : Specifies the timewindow (in seconds) of each SQL query when historical data (past data) is requested. The default value is 1800 . iotp : This configuration object is required and contains the essential information to configure the connector for connecting to MAS and send device data to it. To fill in this object, you need credentials from MAS Monitor API and IoT tool API. Required Items: url : Specifies MAS Monitor IoT tool API URL used to configure MAS. orgId : Specifies a six character organization Id assigned to your IoT Platform service. It is usually the first element in the url item. host : Specifies IoT tool host for connecting to MAS to send device data. port : Specifies port to connect to MAS. apiKey : Specifies IoT tool API Key to configure device types, devices, interfaces and send MQTT messages. apiToken : Specifies IoT tool API Token to configure device types, devices, interfaces and send MQTT messages. schemaName : Specifies the database schema to configure dimensions. tenantId : Specifies tenant ID. asHost : Specifies MAS Monitor host to configure dimensions. asKey : Specifies MAS Monitor API key to configure dimensions. asToken : Specifies MAS Monitor API token to configure dimensions. apiVersion : Specifies Monitor API version. Valid options are 1 and 2 (default). trustServerCert : Specifies whether to trust all SSL certificates or not. If set to 1 , all certificates are trusted. mamUserEmail : Email address used to create the REST client if apiVersion is set to 2 and isSAASEnv is set to 0 . publishProtocol : Specifies the protocol/method used to publish. Default value is \"mqtt\" . Other valid values are \"kafka\" and \"dbupload\" but they are not currently supported. iotClientType : Defines the IoT MQTT client type. Default value is 1 (Device Client), but it can also take 2 (Gateway client) or 3 (Application client). It affects the publisher. isSAASEnv : Decides the initialization of te REST client. If set to 0 , REST client uses the Monitor API credentials, while for any other value it will use the IoT tool credentials.","title":"Connection Configuration Object"},{"location":"connection/#sample-connectionjson-configuration-file","text":"{ \"id\": \"Connection JSON file of ABC Corp.\", \"historian\": { \"type\": \"osipi\", \"jdbcUrl\": \"jdbc:pioledb://mySQLDAS/Data Source=myPIServer; Integrated Security=SSPI;\", \"user\": \"Administrator\", \"password\": \"xxxxxxxxxx\", \"serverTimezone\": \"American/Chicago\", \"startDate\": \"2021-12-05 05:00:00\", \"dbType\": \"pisql\", \"schema\": \"piarchive\", \"database\": \"picomp2\", \"extractInterval\": 120, \"extractIntervalHistorical\": 1800 }, \"iotp\": { \"url\": \"https://tenant1.iot.monitordemo.ibmmam.com/api/v0002\", \"orgId\": \"tenant1\", \"host\": \"tenant1.messaging.iot.monitordemo.ibmmam.com\", \"port\": 443, \"schemaName\": \"BLUADMIN\", \"apiKey\": \"a-xxxxxx-tavok0xsxt\", \"apiToken\": \"cNyH_XXXXXX-p2ppVl\", \"tenantId\": \"tenant1\", \"asHost\": \"tenant1.api.monitor.monitordemo3.ibmmam.com\", \"asKey\": \"xxxxxxxxxxxxxxxxxx\", \"asToken\": \"xxxxxxxxxxxxxxxxxxxx\", \"apiVersion\": 2, \"trustServerCert\": 1, \"mamUserEmail\": \"example@example.com\", \"publishProtocol\": \"mqtt\", \"iotClientType\": 1 }, \"isSAASEnv\": 0 }","title":"Sample connection.json Configuration File"},{"location":"installation/","text":"Installing MAS SCADA Historian Connector \uf0c1 The installation process includes downloading the installation package from IBM Passport Advantage, and completing the initial setup on an on-premise host system or in cloud. The on-premise host system or the cloud instance must have access to SCADA Historian. System requirements \uf0c1 Before you begin the connector installation, make sure that your system fulfills the following requirements. The connector is tested on the following operating environments. Windows 2016 server or higher Windows 10 Ubuntu 18.08 macOS BigSur Memory: 8 GB Disk space: 10 GB of free disk space for install package, data and logs Java Runtime Environment: Java 11. Note that the connector installer will download and install OpenJDK 11 if it can not find Java 11 on the host system. MAS data connector installation steps \uf0c1 On Windows system: \uf0c1 You need Powershell on your Windows system. For information on how to install it, check: How to install Powershell on Windows ? Open a Powershell terminal with admin privileges and run the following commands to download the install script install.ps1 from the connector repository to the desired directory, and run it. % cd <desired_directory> % Invoke-WebRequest -Uri \"https://raw.githubusercontent.com/ibm-watson-iot/mas-scada-historian-connector/master/bin/install.ps1\" -OutFile \".\\install.ps1\" % powershell.exe -ExecutionPolicy Bypass .\\install.ps1 To configure connector tasks, run the following commands: % cd C:\\ibm\\masshc\\bin\\ % powershell.exe -ExecutionPolicy Bypass .\\configTask.ps1 On macOS or Linux systems \uf0c1 Use one the following options to get the project source on your system: Use a Web browser to download the Connector zip file from the GitHub repository and save it in the /tmp directory. To unzip it, open a shell prompt and run the following commands: $ cd /tmp $ unzip mas-scada-historian-connector-master.zip Open a shell prompt and use the following curl command to download the Connector zip file from the GitHub project into the /tmp directory and unzip it $ curl https://github.com/ibm-watson-iot/mas-scada-historian-connector/archive/master.zip -L -o /tmp/mas-scada-historian-connector-master.zip $ cd /tmp $ unzip mas-scada-historian-connector-master.zip Use git command to clone the Connector GitHub repository into the /tmp directory: $ cd /tmp $ git clone https://github.com/ibm-watson-iot/mas-scada-historian-connector To install the connector, open a shell prompt, and run the install script: $ cd /tmp/mas-scada-historian-connector $ ./bin/install.sh","title":"Installation"},{"location":"installation/#installing-mas-scada-historian-connector","text":"The installation process includes downloading the installation package from IBM Passport Advantage, and completing the initial setup on an on-premise host system or in cloud. The on-premise host system or the cloud instance must have access to SCADA Historian.","title":"Installing MAS SCADA Historian Connector"},{"location":"installation/#system-requirements","text":"Before you begin the connector installation, make sure that your system fulfills the following requirements. The connector is tested on the following operating environments. Windows 2016 server or higher Windows 10 Ubuntu 18.08 macOS BigSur Memory: 8 GB Disk space: 10 GB of free disk space for install package, data and logs Java Runtime Environment: Java 11. Note that the connector installer will download and install OpenJDK 11 if it can not find Java 11 on the host system.","title":"System requirements"},{"location":"installation/#mas-data-connector-installation-steps","text":"","title":"MAS data connector installation steps"},{"location":"installation/#on-windows-system","text":"You need Powershell on your Windows system. For information on how to install it, check: How to install Powershell on Windows ? Open a Powershell terminal with admin privileges and run the following commands to download the install script install.ps1 from the connector repository to the desired directory, and run it. % cd <desired_directory> % Invoke-WebRequest -Uri \"https://raw.githubusercontent.com/ibm-watson-iot/mas-scada-historian-connector/master/bin/install.ps1\" -OutFile \".\\install.ps1\" % powershell.exe -ExecutionPolicy Bypass .\\install.ps1 To configure connector tasks, run the following commands: % cd C:\\ibm\\masshc\\bin\\ % powershell.exe -ExecutionPolicy Bypass .\\configTask.ps1","title":"On Windows system:"},{"location":"installation/#on-macos-or-linux-systems","text":"Use one the following options to get the project source on your system: Use a Web browser to download the Connector zip file from the GitHub repository and save it in the /tmp directory. To unzip it, open a shell prompt and run the following commands: $ cd /tmp $ unzip mas-scada-historian-connector-master.zip Open a shell prompt and use the following curl command to download the Connector zip file from the GitHub project into the /tmp directory and unzip it $ curl https://github.com/ibm-watson-iot/mas-scada-historian-connector/archive/master.zip -L -o /tmp/mas-scada-historian-connector-master.zip $ cd /tmp $ unzip mas-scada-historian-connector-master.zip Use git command to clone the Connector GitHub repository into the /tmp directory: $ cd /tmp $ git clone https://github.com/ibm-watson-iot/mas-scada-historian-connector To install the connector, open a shell prompt, and run the install script: $ cd /tmp/mas-scada-historian-connector $ ./bin/install.sh","title":"On macOS or Linux systems"},{"location":"mapping/","text":"Mapping Rules Configuration \uf0c1 In MAS Data Lake, the device data for different device types are stored in their own table. The tables are named as IOT_<deviceType> . The configuration items that control the transformation of extracted data from SCADA historian for a specific device type, are defined in mapping.json . The location of this configuration file is <InstallRoot>/volume/config/mapping.json . Configuration Object \uf0c1 Provide data configuration object in a json formated file: { \"serviceName\": \"String\", \"description\": \"String\", \"serviceType\": \"String\", \"csvFileName\": \"String\", \"deviceTypes\": [ { \"type\": \"String\", \"tagpathFilters\": [ \"String\" ], \"discardFilters\": [ \"String\" ] } ], \"metrics\": { \"name\": \"String\", \"value\": \"String\", \"unit\": \"String\", \"type\": \"String\", \"decimalAccuracy\": \"String\", \"label\": \"String\" }, \"dimensions\": { \"tagpath\": \"String\", \"tagid\": \"String\", \"site\": \"String\", \"categories\": \"String\" }, \"mappingFormat\": Integer, \"createEntityType\": Bool } Where: serviceName : Defines the name of the service. description : Small description to identify the file. csvFileName : Name of the CSV file stored in <InstallRoot>/volume/config/ that contains the desired tags information. serviceType : Type of service to be run. Can be osipi or ignition . deviceTypes : Specifies device types and corresponding tagpath patterns. type : Specifies the device type name where the device will be created from. tagpathFilters : List of tagpath patterns that indicate which tags are mapped into the specified device type. discardFilters : List of tagpath patterns that inidicate which tags are NOT mapped into the specified device type. metrics : This object defines the mapping rule for device metrics data items. name : Column name in CSV file used to map metric \"Name\". value : Metric value is extracted from PI Archive database at runtime. Set this to an empty string in this configuration object. unit : Column name in CSV file used to map metric \"Unit\". type : Column name in CSV file used to map metric \"Type\". label : Column name in CSV file used to map metric \"Label\". decimalAccuracy : Column name in CSV file used to map metric \"Decimal Accuracy\". dimensions : This object defines the mapping rule for device dimension data. tagpath : One or more column name(s) in the CSV file used to create \"tag path\" tagid : Column name in the CSV file used to map \"tag id\" site : Column name in the CSV file used to map \"site name\". categories : Column name in the CSV file used to map \"Categories\". mappingFormat : Decides how the tags are built from the CSV file. If set to 1 (Default), tagpath is can be created using different columns (use when CSV is exported from PI Builder), while if set to 2 , tagpaths need to be contained in a single column. createEntityType : Whether or not to enable the creation of Entity types. Can be either true or false (Default). Sample CSV file (pidemo.csv) used to define mapping.json configuration file \uf0c1 Parent Name ObjecType Error UniqueID ParentUniqueID Description Categories AttributeDefaultUOM AttributeType AttributeValue AttributeDataReference AttributeDisplayDigits DistillExample.4820Column Accumulator Level Attribute 5ef1040f-b6af-59f7-352c-0442281fb1f9 Liquid level in reflux accumulator Process Parameters % Double PI Point -5 Below is the textualized version of the table above. One can copy it to a csv file to obtain the example pidemo.csv file. Parent,Name,ObjectType,Error,UniqueID,ParentUniqueID,Description,Categories,AttributeDefaultUOM,AttributeType,AttributeValue,AttributeDataReference,AttributeDisplayDigits DistillExample.4820Column,Accumulator Level,Attribute,,5ef1040f-b6af-59f7-352c-0442281fb1f9,,Liquid level in reflux accumulator,Process Parameters,%,Double,,PI Point,-5 Sample mapping.json Configuration File for \uf0c1 { \"serviceName\": \"Service1\", \"description\": \"For example purposes\" \"csvFileName\": \"pidemo.csv\", \"serviceType\": \"osipi\", \"deviceTypes\": [ { \"type\": \"PIDemoType\", \"tagpathFilters\": [ \"DistillExample.*\" ], \"discardFilters\":[ \"%Sacramento Plant%\", \"HydroExample.*\" ] } ], \"metrics\": { \"name\": \"${Name}\", \"value\": \"\", \"unit\": \"${AttributeDefaultUOM}\", \"type\": \"${AttributeType}\", \"decimalAccuracy\": \"${AttributeDisplayDigits}\", \"label\": \"${Description}\" }, \"dimensions\": { \"tagpath\": \"${Parent},${Name}\", \"tagid\": \"${UniqueID}\", \"site\": \"IBMAustin\", \"categories\": \"${Categories}\" }, \"mappingFormat\": 1, \"createEntityType\": true } NOTES: To map a column name, specify the column name within curly brackets {} , For example \"unit\": \"${AttributeDefaultUOM}. Column names are case sensitive. The \"unit\" in pidemo.csv example will map to \"lb/h\" . You can use comma-separated list of column name(s) to map a metric or dimension data. For example \"${Parent},${Name}\" mapping rule is used to specify tagpath. The tagpath in this example will map to \"DistillExample.4820Column.Accumulator Level\". A dot . will be used as a field-separator. DO not use curly brackets {} to specify a fixed value. For example \"site\": \"IBMAustin\" .","title":"Mapping Rules Configuration"},{"location":"mapping/#mapping-rules-configuration","text":"In MAS Data Lake, the device data for different device types are stored in their own table. The tables are named as IOT_<deviceType> . The configuration items that control the transformation of extracted data from SCADA historian for a specific device type, are defined in mapping.json . The location of this configuration file is <InstallRoot>/volume/config/mapping.json .","title":"Mapping Rules Configuration"},{"location":"mapping/#configuration-object","text":"Provide data configuration object in a json formated file: { \"serviceName\": \"String\", \"description\": \"String\", \"serviceType\": \"String\", \"csvFileName\": \"String\", \"deviceTypes\": [ { \"type\": \"String\", \"tagpathFilters\": [ \"String\" ], \"discardFilters\": [ \"String\" ] } ], \"metrics\": { \"name\": \"String\", \"value\": \"String\", \"unit\": \"String\", \"type\": \"String\", \"decimalAccuracy\": \"String\", \"label\": \"String\" }, \"dimensions\": { \"tagpath\": \"String\", \"tagid\": \"String\", \"site\": \"String\", \"categories\": \"String\" }, \"mappingFormat\": Integer, \"createEntityType\": Bool } Where: serviceName : Defines the name of the service. description : Small description to identify the file. csvFileName : Name of the CSV file stored in <InstallRoot>/volume/config/ that contains the desired tags information. serviceType : Type of service to be run. Can be osipi or ignition . deviceTypes : Specifies device types and corresponding tagpath patterns. type : Specifies the device type name where the device will be created from. tagpathFilters : List of tagpath patterns that indicate which tags are mapped into the specified device type. discardFilters : List of tagpath patterns that inidicate which tags are NOT mapped into the specified device type. metrics : This object defines the mapping rule for device metrics data items. name : Column name in CSV file used to map metric \"Name\". value : Metric value is extracted from PI Archive database at runtime. Set this to an empty string in this configuration object. unit : Column name in CSV file used to map metric \"Unit\". type : Column name in CSV file used to map metric \"Type\". label : Column name in CSV file used to map metric \"Label\". decimalAccuracy : Column name in CSV file used to map metric \"Decimal Accuracy\". dimensions : This object defines the mapping rule for device dimension data. tagpath : One or more column name(s) in the CSV file used to create \"tag path\" tagid : Column name in the CSV file used to map \"tag id\" site : Column name in the CSV file used to map \"site name\". categories : Column name in the CSV file used to map \"Categories\". mappingFormat : Decides how the tags are built from the CSV file. If set to 1 (Default), tagpath is can be created using different columns (use when CSV is exported from PI Builder), while if set to 2 , tagpaths need to be contained in a single column. createEntityType : Whether or not to enable the creation of Entity types. Can be either true or false (Default).","title":"Configuration Object"},{"location":"mapping/#sample-csv-file-pidemocsv-used-to-define-mappingjson-configuration-file","text":"Parent Name ObjecType Error UniqueID ParentUniqueID Description Categories AttributeDefaultUOM AttributeType AttributeValue AttributeDataReference AttributeDisplayDigits DistillExample.4820Column Accumulator Level Attribute 5ef1040f-b6af-59f7-352c-0442281fb1f9 Liquid level in reflux accumulator Process Parameters % Double PI Point -5 Below is the textualized version of the table above. One can copy it to a csv file to obtain the example pidemo.csv file. Parent,Name,ObjectType,Error,UniqueID,ParentUniqueID,Description,Categories,AttributeDefaultUOM,AttributeType,AttributeValue,AttributeDataReference,AttributeDisplayDigits DistillExample.4820Column,Accumulator Level,Attribute,,5ef1040f-b6af-59f7-352c-0442281fb1f9,,Liquid level in reflux accumulator,Process Parameters,%,Double,,PI Point,-5","title":"Sample CSV file (pidemo.csv) used to define mapping.json configuration file"},{"location":"mapping/#sample-mappingjson-configuration-file-for","text":"{ \"serviceName\": \"Service1\", \"description\": \"For example purposes\" \"csvFileName\": \"pidemo.csv\", \"serviceType\": \"osipi\", \"deviceTypes\": [ { \"type\": \"PIDemoType\", \"tagpathFilters\": [ \"DistillExample.*\" ], \"discardFilters\":[ \"%Sacramento Plant%\", \"HydroExample.*\" ] } ], \"metrics\": { \"name\": \"${Name}\", \"value\": \"\", \"unit\": \"${AttributeDefaultUOM}\", \"type\": \"${AttributeType}\", \"decimalAccuracy\": \"${AttributeDisplayDigits}\", \"label\": \"${Description}\" }, \"dimensions\": { \"tagpath\": \"${Parent},${Name}\", \"tagid\": \"${UniqueID}\", \"site\": \"IBMAustin\", \"categories\": \"${Categories}\" }, \"mappingFormat\": 1, \"createEntityType\": true } NOTES: To map a column name, specify the column name within curly brackets {} , For example \"unit\": \"${AttributeDefaultUOM}. Column names are case sensitive. The \"unit\" in pidemo.csv example will map to \"lb/h\" . You can use comma-separated list of column name(s) to map a metric or dimension data. For example \"${Parent},${Name}\" mapping rule is used to specify tagpath. The tagpath in this example will map to \"DistillExample.4820Column.Accumulator Level\". A dot . will be used as a field-separator. DO not use curly brackets {} to specify a fixed value. For example \"site\": \"IBMAustin\" .","title":"Sample mapping.json Configuration File for"},{"location":"overview/","text":"Overview \uf0c1 IBM MAS SCADA Historian connector application performs the following tasks: Registers the required information into MAS Monitor for device type and device creation, guided by the configuration files. Extracts tag data from SCADA historian. Transforms tag data into MQTT events and send events to MAS Monitor. The device events can be used by IBM MAS Monitor for visualization and AI-driven analytics. Supported SCADA Historians: AVEVA PI historian (former OSIsoft PI historian) Ignition Historian High-Level Architecture \uf0c1 AVEVA (former OSIsoft) data historian (PI Data Archive) stores sensor data collected from PLCs. MAS SCADA Historian connector extracts PI Point data from PI Data Archive. MAS SCADA Historian connector sends PI Point data to IBM MAS Monitor using MQTT protocol. MAS Monitor is used for PI Point data visualization and AI-driven analytics.","title":"Overview"},{"location":"overview/#overview","text":"IBM MAS SCADA Historian connector application performs the following tasks: Registers the required information into MAS Monitor for device type and device creation, guided by the configuration files. Extracts tag data from SCADA historian. Transforms tag data into MQTT events and send events to MAS Monitor. The device events can be used by IBM MAS Monitor for visualization and AI-driven analytics. Supported SCADA Historians: AVEVA PI historian (former OSIsoft PI historian) Ignition Historian","title":"Overview"},{"location":"overview/#high-level-architecture","text":"AVEVA (former OSIsoft) data historian (PI Data Archive) stores sensor data collected from PLCs. MAS SCADA Historian connector extracts PI Point data from PI Data Archive. MAS SCADA Historian connector sends PI Point data to IBM MAS Monitor using MQTT protocol. MAS Monitor is used for PI Point data visualization and AI-driven analytics.","title":"High-Level Architecture"}]}